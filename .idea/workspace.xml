<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="b9f07ee3-7d48-422e-8842-6de6776735bb" name="Default Changelist" comment="">
      <change afterPath="$PROJECT_DIR$/.idea/vcs.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/me/grison/raytraclj/image.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/README.md" beforeDir="false" afterPath="$PROJECT_DIR$/README.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/deps.edn" beforeDir="false" afterPath="$PROJECT_DIR$/deps.edn" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/raytraclj.iml" beforeDir="false" afterPath="$PROJECT_DIR$/raytraclj.iml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/me/grison/raytraclj/app.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/me/grison/raytraclj/app.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/me/grison/raytraclj/core.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/me/grison/raytraclj/core.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/test/me/grison/raytraclj/core_test.clj" beforeDir="false" afterPath="$PROJECT_DIR$/test/me/grison/raytraclj/core_test.clj" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="CodeStyleSettingsInfer">
    <option name="done" value="true" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Clojure Namespace" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="ProjectCodeStyleSettingsMigration">
    <option name="version" value="1" />
  </component>
  <component name="ProjectId" id="1aOQBQ5MaZ8x2LOK4xoWH8ElTVB" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showExcludedFiles" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">
    <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="aspect.path.notification.shown" value="true" />
    <property name="cursive.last.file.extension.C\:/dev/github/raytraclj/src" value="clj" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
  </component>
  <component name="ReplState" timestamp="1586607263421">{:repl-history {:ide [], :local [{:command &quot;(in-ns 'me.grison.raytraclj.core)&quot;, :offset 33, :ns &quot;user&quot;} {:command &quot;(interpose [100 200] \&quot; \&quot;)&quot;, :offset 25, :ns &quot;me.grison.raytraclj.core&quot;} {:command &quot;(let [nx 200\n      ny 100\n      header (str \&quot;P3\\n\&quot; nx \&quot; \&quot; ny \&quot;\\n255\\n\&quot;)\n      body (clojure.string/join (for [j (range (dec ny) -1 -1)\n                                      i (range 0 nx)\n                                      :let [r (/ i nx)\n                                            g (/ j ny)\n                                            b 0.2\n                                            ir (int (* 255.99 r))\n                                            ig (int (* 255.99 g))\n                                            ib (int (* 255.99 b))]]\n                                  (str ir \&quot; \&quot; ig \&quot; \&quot; ib \&quot;\\n\&quot;)))]\n  {:header header :body body})&quot;, :offset 643, :ns &quot;me.grison.raytraclj.core&quot;} {:command &quot;(let [nx 200\n      ny 100\n      header (str \&quot;P3\\n\&quot; nx \&quot; \&quot; ny \&quot;\\n255\\n\&quot;)\n      pixels (for [j (range (dec ny) -1 -1)\n                   i (range 0 nx)\n                   :let [r (/ i nx)\n                         g (/ j ny)\n                         b 0.2\n                         ir (int (* 255.99 r))\n                         ig (int (* 255.99 g))\n                         ib (int (* 255.99 b))]]\n               (str ir \&quot; \&quot; ig \&quot; \&quot; ib \&quot;\\n\&quot;))]\n  {:header header :body pixels})&quot;, :offset 473, :ns &quot;me.grison.raytraclj.core&quot;} {:command &quot;(ns me.grison.raytraclj.core\n  (:require [me.grison.raytraclj.image :as img]))&quot;, :offset 78, :ns &quot;me.grison.raytraclj.core&quot;} {:command &quot;(defn ppm-header [width height]\n  (str \&quot;P3\\n\&quot; width \&quot; \&quot; height \&quot;\\n255\\n\&quot;))&quot;, :offset 74, :ns &quot;me.grison.raytraclj.core&quot;} {:command &quot;(defn pixel-line [line]\n  (str (interpose line \&quot; \&quot;) \&quot;\\n\&quot;))&quot;, :offset 58, :ns &quot;me.grison.raytraclj.core&quot;} {:command &quot;(defn pixel-line [r g b]\n  (str r \&quot; \&quot; g \&quot; \&quot; b \&quot;\\n\&quot;))&quot;, :offset 52, :ns &quot;me.grison.raytraclj.core&quot;} {:command &quot;(pixel-line 0 1 2)&quot;, :offset 18, :ns &quot;me.grison.raytraclj.core&quot;} {:command &quot;(let [nx 200\n      ny 100\n      header (str \&quot;P3\\n\&quot; nx \&quot; \&quot; ny \&quot;\\n255\\n\&quot;)\n      pixels (for [j (range (dec ny) -1 -1)\n                   i (range 0 nx)\n                   :let [r (int (* 255.99 (/ i nx)))\n                         g (int (* 255.99 (/ j ny)))\n                         b (int (* 255.99 0.2))]]\n               (pixel-line r g b))\n      body (clojure.string/join pixels)]\n  (img/save-jpg (str header body) \&quot;/mnt/c/temp/lol\&quot;))&quot;, :offset 435, :ns &quot;me.grison.raytraclj.core&quot;} {:command &quot;(let [nx 200\n      ny 100\n      header (str \&quot;P3\\n\&quot; nx \&quot; \&quot; ny \&quot;\\n255\\n\&quot;)\n      pixels (for [j (range (dec ny) -1 -1)\n                   i (range 0 nx)\n                   :let [r (int (* 255.99 (/ i nx)))\n                         g (int (* 255.99 (/ j ny)))\n                         b (int (* 255.99 0.2))]]\n               (pixel-line r g b))\n      body (clojure.string/join pixels)]\n  (print (str header body))\n  (img/save-jpg (str header body) \&quot;C:/temp/lol\&quot;))&quot;, :offset 459, :ns &quot;me.grison.raytraclj.core&quot;} {:command &quot;(+ 1 2)&quot;, :offset 7, :ns &quot;me.grison.raytraclj.core&quot;} {:command &quot;(defn load-ppm [^String path]\n  (println \&quot;Loading PPM: \&quot; path)\n  (with-open [in (io/input-stream (io/file path))]\n    (ImageIO/read in)))&quot;, :offset 137, :ns &quot;me.grison.raytraclj.image&quot;} {:command &quot;(defn save-ppm [^String ppm ^String path]\n  (println \&quot;Saving PPM: \&quot; path)\n  (spit path ppm))&quot;, :offset 92, :ns &quot;me.grison.raytraclj.image&quot;} {:command &quot;(let [nx 200\n      ny 100\n      header (str \&quot;P3\\n\&quot; nx \&quot; \&quot; ny \&quot;\\n255\\n\&quot;)\n      pixels (for [j (range (dec ny) -1 -1)\n                   i (range 0 nx)\n                   :let [r (int (* 255.99 (/ i nx)))\n                         g (int (* 255.99 (/ j ny)))\n                         b (int (* 255.99 0.2))]]\n               (pixel-line r g b))\n      body (clojure.string/join pixels)]\n  (img/save-jpg (str header body) \&quot;C:/temp/lol\&quot;))&quot;, :offset 431, :ns &quot;me.grison.raytraclj.core&quot;} {:command &quot;(defn save-jpg [^String ppm ^String path]\n  (save-ppm ppm (str path \&quot;.ppm\&quot;))\n  (Thread/sleep 500)\n  (store-jpeg (load-ppm (str path \&quot;.ppm\&quot;)) (str path \&quot;.jpg\&quot;)))&quot;, :offset 160, :ns &quot;me.grison.raytraclj.image&quot;} {:command &quot;(let [nx 200\n      ny 100\n      header (str \&quot;P3\\n\&quot; nx \&quot; \&quot; ny \&quot;\\n255\\n\&quot;)\n      pixels (for [j (range (dec ny) -1 -1)\n                   i (range 0 nx)\n                   :let [r (int (* 255.99 (/ i nx)))\n                         g (int (* 255.99 (/ j ny)))\n                         b (int (* 255.99 0.2))]]\n               (pixel-line r g b))\n      body (clojure.string/join pixels)\n      ppm (str header body)\n      _ (img/save-ppm ppm \&quot;C:/temp/lol\&quot;)\n      img (img/load-ppm \&quot;C:/temp/lol.ppm\&quot;)]\n  (println img)\n  (img/store-jpeg img \&quot;C:/temp/lol.jpg\&quot;))&quot;, :offset 551, :ns &quot;me.grison.raytraclj.core&quot;} {:command &quot;(let [nx 200\n      ny 100\n      header (str \&quot;P3\\n\&quot; nx \&quot; \&quot; ny \&quot;\\n255\\n\&quot;)\n      pixels (for [j (range (dec ny) -1 -1)\n                   i (range 0 nx)\n                   :let [r (int (* 255.99 (/ i nx)))\n                         g (int (* 255.99 (/ j ny)))\n                         b (int (* 255.99 0.2))]]\n               (pixel-line r g b))\n      body (clojure.string/join pixels)\n      ppm (str header body)\n      _ (img/save-ppm ppm \&quot;C:/temp/lol\&quot;)\n      _ (Thread/sleep 1000)\n      img (img/load-ppm \&quot;C:/temp/lol.ppm\&quot;)]\n  (println img)\n  (img/store-jpeg img \&quot;C:/temp/lol.jpg\&quot;))&quot;, :offset 579, :ns &quot;me.grison.raytraclj.core&quot;} {:command &quot;(let [nx 200\n      ny 100\n      header (str \&quot;P3\\n\&quot; nx \&quot; \&quot; ny \&quot;\\n255\\n\&quot;)\n      pixels (for [j (range (dec ny) -1 -1)\n                   i (range 0 nx)\n                   :let [r (int (* 255.99 (/ i nx)))\n                         g (int (* 255.99 (/ j ny)))\n                         b (int (* 255.99 0.2))]]\n               (pixel-line r g b))\n      body (clojure.string/join pixels)\n      ppm (str header body)\n      _ (img/save-ppm ppm \&quot;C:/temp/lol.ppm\&quot;)\n      _ (Thread/sleep 1000)\n      img (img/load-ppm \&quot;C:/temp/lol.ppm\&quot;)]\n  (println img)\n  (img/store-jpeg img \&quot;C:/temp/lol.jpg\&quot;))&quot;, :offset 583, :ns &quot;me.grison.raytraclj.core&quot;} {:command &quot;(img/load-ppm \&quot;C:/temp/lol.ppm\&quot;)&quot;, :offset 32, :ns &quot;user&quot;}], :remote []}}</component>
  <component name="RunManager" selected="Clojure REPL.remote">
    <configuration name="Unnamed" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false" nameIsGenerated="true">
      <module name="raytraclj" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="INTELLIJ" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="SOCKET" />
      <setting name="configType" value="SPECIFY" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration name="remote" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <module name="raytraclj" />
      <setting name="host" value="localhost" />
      <setting name="port" value="61941" />
      <setting name="replType" value="NREPL" />
      <setting name="configType" value="SPECIFY" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Clojure REPL.Unnamed" />
      <item itemvalue="Clojure REPL.remote" />
    </list>
  </component>
  <component name="ServiceViewManager">
    <option name="viewStates">
      <list>
        <serviceView>
          <treeState>
            <expand />
            <select />
          </treeState>
        </serviceView>
      </list>
    </option>
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="b9f07ee3-7d48-422e-8842-6de6776735bb" name="Default Changelist" comment="" />
      <created>1586604023044</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1586604023044</updated>
      <workItem from="1586604027418" duration="3234000" />
    </task>
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="1" />
  </component>
  <component name="WindowStateProjectService">
    <state x="1100" y="642" key="#com.intellij.execution.impl.EditConfigurationsDialog" timestamp="1586606964998">
      <screen x="0" y="40" width="2560" height="1400" />
    </state>
    <state x="1100" y="642" key="#com.intellij.execution.impl.EditConfigurationsDialog/0.40.2560.1400@0.40.2560.1400" timestamp="1586606964998" />
  </component>
</project>